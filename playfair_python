import tkinter as tk
from tkinter import messagebox

def create_key_matrix(key):
    alphabet = "ABCDEFGHIKLMNOPQRSTUVWXYZ"
    key = ''.join(sorted(set(key), key=key.index))
    key_matrix = [c for c in key.upper() if c in alphabet]
    used_letters = set(key_matrix)
    key_matrix += [c for c in alphabet if c not in used_letters]
    return [key_matrix[i:i+5] for i in range(0, 25, 5)]

def find_position(char, key_matrix):
    for i, row in enumerate(key_matrix):
        if char in row:
            return i, row.index(char)
    return None

def playfair_encrypt(plaintext, key):
    key_matrix = create_key_matrix(key)
    plaintext = ''.join([c for c in plaintext.upper().replace('J', 'I') if c in "ABCDEFGHIKLMNOPQRSTUVWXYZ"])
    digraphs = []
    i = 0
    while i < len(plaintext):
        a = plaintext[i]
        b = plaintext[i+1] if i+1 < len(plaintext) else 'X'
        if a == b:
            b = 'X'
            digraphs.append((a, b))
            i += 1
        else:
            digraphs.append((a, b))
            i += 2
        if i == len(plaintext) - 1:
            digraphs.append((plaintext[i], 'X'))
            break

    ciphertext = ''
    for a, b in digraphs:
        row1, col1 = find_position(a, key_matrix)
        row2, col2 = find_position(b, key_matrix)
        if row1 == row2:
            ciphertext += key_matrix[row1][(col1 + 1) % 5]
            ciphertext += key_matrix[row2][(col2 + 1) % 5]
        elif col1 == col2:
            ciphertext += key_matrix[(row1 + 1) % 5][col1]
            ciphertext += key_matrix[(row2 + 1) % 5][col2]
        else:
            ciphertext += key_matrix[row1][col2]
            ciphertext += key_matrix[row2][col1]
    return ciphertext

def playfair_decrypt(ciphertext, key):
    key_matrix = create_key_matrix(key)
    ciphertext = ''.join([c for c in ciphertext.upper() if c in "ABCDEFGHIKLMNOPQRSTUVWXYZ"])
    digraphs = [(ciphertext[i], ciphertext[i+1]) for i in range(0, len(ciphertext), 2)]
    plaintext = ''
    for a, b in digraphs:
        row1, col1 = find_position(a, key_matrix)
        row2, col2 = find_position(b, key_matrix)
        if row1 == row2:
            plaintext += key_matrix[row1][(col1 - 1) % 5]
            plaintext += key_matrix[row2][(col2 - 1) % 5]
        elif col1 == col2:
            plaintext += key_matrix[(row1 - 1) % 5][col1]
            plaintext += key_matrix[(row2 - 1) % 5][col2]
        else:
            plaintext += key_matrix[row1][col2]
            plaintext += key_matrix[row2][col1]
    return plaintext

def encrypt_button_pressed():
    key = key_entry.get()
    plaintext = plaintext_entry.get()
    if not key or not plaintext:
        messagebox.showinfo("Error", "Key and plaintext cannot be empty.")
        return
    encrypted_text = playfair_encrypt(plaintext, key)
    ciphered_entry.delete(0, tk.END)
    ciphered_entry.insert(0, encrypted_text)
    result_label.config(text="Encrypted: " + encrypted_text)

def decrypt_button_pressed():
    key = key_entry.get()
    ciphertext = ciphered_entry.get()
    if not key or not ciphertext:
        messagebox.showinfo("Error", "Key and ciphered text cannot be empty.")
        return
    decrypted_text = playfair_decrypt(ciphertext, key)
    result_label.config(text="Decrypted: " + decrypted_text)

# Set up the main window
root = tk.Tk()
root.title("Playfair Cipher GUI")

# Set up the input fields and labels
tk.Label(root, text="Key:").grid(row=0, column=0)
key_entry = tk.Entry(root)
key_entry.grid(row=0, column=1)

tk.Label(root, text="Plaintext:").grid(row=1, column=0)
plaintext_entry = tk.Entry(root)
plaintext_entry.grid(row=1, column=1)

tk.Label(root, text="Ciphered Text:").grid(row=2, column=0)
ciphered_entry = tk.Entry(root)
ciphered_entry.grid(row=2, column=1)

# Set up the encrypt and decrypt buttons
encrypt_button = tk.Button(root, text="Encrypt", command=encrypt_button_pressed)
encrypt_button.grid(row=3, column=0)
decrypt_button = tk.Button(root, text="Decrypt", command=decrypt_button_pressed)
decrypt_button.grid(row=3, column=1)

# Set up the result label
result_label = tk.Label(root, text="Result:")
result_label.grid(row=4, column=0, columnspan=2)

# Run the application
root.mainloop()
